test_that("CreateModelList works", {
expect_s3_class(CreateModelList(), "ModelList")
})
test_that("CreateModelList works", {
expect_equal(length(CreateModelList(mod1, mod2), 2))
expect_s3_class(CreateModelList(), "ModelList")
})
library(testthat)
source("functions.R")
library(testthat)
source("functions.R")
source("./functions.R")
source("./functions.R")
source(here::here('functions.R'))
source("./R/functions.R"))
source("./R/functions.R")
test_that("CreateModelList works", {
expect_equal(length(CreateModelList(mod1, mod2), 2))
expect_s3_class(CreateModelList(), "ModelList")
})
# create sample to use for testing
data <- gapminder::gapminder
mod1 <- lm(lifeExp ~ year, data)
mod2 <- lm(lifeExp ~ year + pop, data)
test_that("CreateModelList works", {
expect_equal(length(CreateModelList(mod1, mod2), 2))
expect_s3_class(CreateModelList(), "ModelList")
})
test_that("CreateModelList works", {
expect_equal(length(CreateModelList(mod1, mod2)), 2)
expect_s3_class(CreateModelList(), "ModelList")
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
})
source("./R/functions.R")
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
})
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
class(s)
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_s3_class(s, "list")
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_class(s, "list")
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_type(s, "list")
})
# create sample to use for testing
df <- gapminder::gapminder
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
mod1 <- lm(lifeExp ~ year, train)
mod2 <- lm(lifeExp ~ year + pop, train)
s <- predict(mList, test)
View(s)
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(s), nrow(test))
})
class(m)
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(s), nrow(test))
expect_type(m, "matrix")
})
expect_type(m, c("matrix", "Array"))
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(s), nrow(test))
expect_type(m, c("matrix", "Array"))
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_type(s, "list")
expect_output(s)
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_type(s, "list")
expect_output(summary(mList))
})
typeof(m)
expect_s3_class(m, "matrix")
expect_class(m, "matrix")
expect_s4_class(m, "matrix")
class(m)[1]
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(s), nrow(test))
expect_equal(class(m)[1], "matrix")
})
library(testthat)
source("functions.R")
library(testthat)
source("./R/functions.R")
test_results <- test_dir("tests.R", reporter="summary")
test_results <- test_dir("./R/tests.R", reporter="summary")
test_results <- test_dir("./R/", reporter="summary")
library(testthat)
source("./R/functions.R")
# create sample to use for testing
df <- gapminder::gapminder
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
mod1 <- lm(lifeExp ~ year, train)
mod2 <- lm(lifeExp ~ year + pop, train)
# test ModelList creation ==============================================================
test_that("CreateModelList works", {
mList <- CreateModelList(mod1, mod2)
expect_equal(length(mList), 2)
expect_s3_class(mList, "ModelList")
})
# test summary method ==================================================================
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_type(s, "list")
expect_output(summary(mList))
})
# test predict method ==================================================================
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(s), nrow(test))
expect_equal(class(m)[1], "matrix")
})
library(testthat)
source("./R/functions.R")
# create sample to use for testing
df <- gapminder::gapminder
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
mod1 <- lm(lifeExp ~ year, train)
mod2 <- lm(lifeExp ~ year + pop, train)
test_that("CreateModelList works", {
mList <- CreateModelList(mod1, mod2)
expect_equal(length(mList), 2)
expect_s3_class(mList, "ModelList")
})
test_that("summary.ModelList works", {
mList <- CreateModelList(mod1, mod2)
s <- summary(mList)
expect_equal(length(s), 2)
expect_type(s, "list")
expect_output(summary(mList))
})
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(s), nrow(test))
expect_equal(class(m)[1], "matrix")
})
test_that("predict.ModelList works", {
mList <- CreateModelList(mod1, mod2)
m <- predict(mList, test)
expect_equal(nrow(m), nrow(test))
expect_equal(class(m)[1], "matrix")
})
library(testthat)
source("./R/functions.R")
test_results <- test_dir("./R/", reporter="summary")
usethis::use_test()
install.packages("roxygen2")
library(roxygen2)
devtools::document()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::document()
R.Verson()
R.Version()
library(devtools)
devtools::document()
# create sample to use for testing
df <- data("mtcars")
# create sample to use for testing
df <- data(mtcars)
# create sample to use for testing
df <- data(mtcars)
# create sample to use for testing
df <- mtcars
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
mod1 <- lm(mpg ~ cyl, train)
mod2 <- lm(mpg ~ cyl + am, train)
df <- mtcars
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
train  <- df[sample, ]
test   <- df[!sample, ]
mod1 <- lm(mpg ~ cyl, train)
mod2 <- lm(mpg ~ cyl + am, train)
devtools::document()
devtools::document()
devtools::document()
library(devtools)
devtools::document()
# Setup, load packages =================================================================
devtools::load_all(".//Users/madeline/Desktop/ModelList")
# Setup, load packages =================================================================
devtools::load_all(".//Users/madeline/Desktop/ModelList/")
devtools::load_all("./Users/madeline/Desktop/ModelList/")
devtools::load_all()
pacman::p_load(tidyverse, gapminder, glmnetUtils, sloop, testthat)
# load data and run model
dataOld <- gapminder::gapminder %>% filter(year <= 2000)
mod1 <- lm(lifeExp ~ year + pop + gdpPercap, dataOld)
mod2 <- rpart::rpart(lifeExp ~ year + pop + gdpPercap, dataOld)
mod3 <- glmnetUtils::cv.glmnet(lifeExp ~ year + pop + gdpPercap, dataOld)
class(mod2)
class(mod3)
mList <- CreateModelList(mod1, mod2, mod3)
s <- summary(mList)
allPred <- predict(mList, newdata=dataNew)
dataNew <- gapminder::gapminder %>% filter(year > 2000)
allPred <- predict(mList, newdata=dataNew)
devtools::document()
devtools::load_all()
allPred <- predict(mList, newdata=dataNew)
devtools::document()
devtools::load_all()
allPred <- predict(mList, newdata=dataNew)
